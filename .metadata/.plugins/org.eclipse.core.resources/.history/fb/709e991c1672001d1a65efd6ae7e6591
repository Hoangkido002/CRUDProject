package com.example.CRUD.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.support.Repositories;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.CRUD.model.Product;
import com.example.CRUD.repository.Repository;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api")
public class Controller {
	@Autowired
	Repository repository;

	@GetMapping("/product")
	public ResponseEntity<List<Product>>getAllProduct(@RequestParam(required = false) String title){
		try {
			List<Product> product = new ArrayList<Product>();
			if(title == null)
				repository.findAll().forEach(product::add);
			else
				repository.findByTitleContaining(title).forEach(product::add);
			if(product.isEmpty()) {
				return new ResponseEntity<>(product, HttpStatus.NO_CONTENT);
			}
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (Exception e) {
			// TODO: handle exception
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	@GetMapping("/product/{id}")
	public ResponseEntity<Product> getProductById(@PathVariable("id") long id){
		Optional<Product> productData = repository.findById(id);
		if (productData.isPresent()) {
			return new ResponseEntity<>(productData.get(),HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	@PostMapping("/product")
	public ResponseEntity<Product> createProduct(@RequestBody Product product){
		try {
			Product _product = repository.save(new Product(0,product.getTitle(),product.getDescription(),product.getNumber(),product.getPrice(),false));
			return new ResponseEntity<>(_product, HttpStatus.CREATED);
			
		} catch (Exception e) {
			return new ResponseEntity<>(null,HttpStatus.INTERNAL_SERVER_ERROR);
			// TODO: handle exception
		}
	}
	@PutMapping("/product/{id}")
	public ResponseEntity<Product> updateProduct(@PathVariable("id") long id, @RequestBody Product product){
		Optional<Product> productData = repository.findById(id);
		if (productData .isPresent()) {
			Product _product = productData.get();
			_product.setTitle(product.getTitle());
			_product.setDescription(product.getDescription());
			_product.setNumber(product.getNumber());
			_product.setPrice(product.getPrice());
			_product.setStatus(product.isStatus());
			return new ResponseEntity<>(repository.save(_product), HttpStatus.OK);
		}else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		
	}
	@DeleteMapping("/product/{id}")
	public ResponseEntity<HttpStatus> deleteProduct(@PathVariable("id") long id){
		try {
			repository.deleteById(id);
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} catch (Exception e) {
			// TODO: handle exception
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	@DeleteMapping("/product")
	public ResponseEntity<HttpStatus> deleteAllProduct(){
		try {
			repository.deleteAll();
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} catch (Exception e) {
			// TODO: handle exception
			ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
}
